/*

  File: problem_2.cpp
  Author: James Edward Natanauan
  Date: 5-6-2015

  This program is for solving the following Project Euler problem:

  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
  find the sum of the even-valued terms.

*/

#include <iostream>
#include <stdio.h>

int BOUND = 4000000; //This variable ensures that the fibonacci numbers found do not exceed 4 million

using namespace std;

int main()
{

	int previous = 1; //Track previous number
	int current = 1; //Track the current number
	int fib_number = 0; //The sum of the current and previous number
	int total = 0; //Sum of all even fib_number's

	//Loop until the fibonacci number exceeds 4 million
	while (fib_number < BOUND)
	{

		//Skip directly to part of sequence that is 0, 1, 1... as the initial condition
		if (previous == 1 && current == 1)
		{
			fib_number = previous + current; //Fibonacci number is the sum of the current and previous number
			current = fib_number; //The current number is updated to the value of the fibonacci number
			total = total + fib_number; //Value will always be 2 and therefore even, thus it is added to total
		}
		//Continue finding fibonacci numbers after initial condition
		else 
		{
			fib_number = previous + current; //Fibonacci number is the sum of the current and previous number
			previous = current; //The previous number is set to current before current is updated
			current = fib_number; //The current number is updated to the value of the fibonacci number

			//If the current Fib number is even and less than 4 million, it is added to total
			if (fib_number%2 == 0 && fib_number < BOUND)
			{
				total = total + fib_number;				
			}
		}
	}

	//Print out the sum of all even fib numbers below 4 million
	cout << "The answer is: " << total << endl;

	return 1;
}